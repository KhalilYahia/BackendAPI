// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YaznGhanem.Model;

#nullable disable

namespace YaznGhanem.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250704132926_TotalOperationView")]
    partial class TotalOperationView
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e5",
                            RoleId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554843yy",
                            RoleId = "fab4fac1-c546-41de-aebc-a14da6895714"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.BoFOpDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BoFOperationId")
                        .HasColumnType("int")
                        .HasColumnName("BoFOperationId");

                    b.Property<string>("ColorType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ColorType");

                    b.Property<int>("Count")
                        .HasColumnType("int")
                        .HasColumnName("Count");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Direction");

                    b.HasKey("Id");

                    b.HasIndex("BoFOperationId");

                    b.ToTable("BoFOpDetails", (string)null);
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.BoFOperations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BoFUserId")
                        .HasColumnType("int")
                        .HasColumnName("BoFUserId");

                    b.Property<string>("BoFUserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("BoFUserName");

                    b.Property<int>("Count")
                        .HasColumnType("int")
                        .HasColumnName("Count");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("Date");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("Notes");

                    b.HasKey("Id");

                    b.HasIndex("BoFUserId");

                    b.ToTable("BoFOperations", (string)null);
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.BoFTotal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Current")
                        .HasColumnType("int")
                        .HasColumnName("Current");

                    b.Property<int>("TotalIn")
                        .HasColumnType("int")
                        .HasColumnName("TotalIn");

                    b.Property<int>("TotalOut")
                        .HasColumnType("int")
                        .HasColumnName("TotalOut");

                    b.HasKey("Id");

                    b.ToTable("BoFTotal", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Current = 0,
                            TotalIn = 0,
                            TotalOut = 0
                        });
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.BoFUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserNameWithoutSpaces")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("BoFUser", (string)null);
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.Buyers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BuyerNameWithoutSpaces")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Buyers", (string)null);
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.Cars", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("EntitlementId")
                        .HasColumnType("int");

                    b.Property<int>("LoadsPerDay")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("PriceOfOne")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("EntitlementId");

                    b.ToTable("Cars", (string)null);
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "فواكه",
                            Sort = 1,
                            Unit = "كغ"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "صناديق وعبوات",
                            Sort = 2,
                            Unit = "قطعة"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "كرستا",
                            Sort = 3,
                            Unit = "كغ"
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "طبالي",
                            Sort = 4,
                            Unit = "قطعة"
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "شمع",
                            Sort = 5,
                            Unit = "لتر"
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "مواد مرافقة للشمع",
                            Sort = 6,
                            Unit = "ليتر"
                        },
                        new
                        {
                            Id = 7,
                            CategoryName = "مواد تخمير",
                            Sort = 8,
                            Unit = "لتر"
                        },
                        new
                        {
                            Id = 8,
                            CategoryName = "عدد وأدوات ومحركات",
                            Sort = 10,
                            Unit = "قطعة"
                        },
                        new
                        {
                            Id = 9,
                            CategoryName = "زينة بالكيس",
                            Sort = 12,
                            Unit = "كيس"
                        },
                        new
                        {
                            Id = 10,
                            CategoryName = "بلاستيك",
                            Sort = 4,
                            Unit = "قطعة"
                        });
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.CoolingRooms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CodeNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("CostOfAll")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostOfUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<int>("RepositoryMaterialId")
                        .HasColumnType("int");

                    b.Property<string>("Room")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TotalBoxes")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("RepositoryMaterialId");

                    b.ToTable("CoolingRooms", (string)null);
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.CustomRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fab4fac1-c546-41de-aebc-a14da6895711",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "fab4fac1-c546-41de-aebc-a14da6895712",
                            ConcurrencyStamp = "2",
                            Name = "Advertiser",
                            NormalizedName = "Advertiser"
                        },
                        new
                        {
                            Id = "fab4fac1-c546-41de-aebc-a14da6895713",
                            ConcurrencyStamp = "3",
                            Name = "Developer",
                            NormalizedName = "Developer"
                        },
                        new
                        {
                            Id = "fab4fac1-c546-41de-aebc-a14da6895714",
                            ConcurrencyStamp = "4",
                            Name = "NormalUser",
                            NormalizedName = "NormalUser"
                        });
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.CustomUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<float>("money")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843e5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "754981be-f748-45dd-aec7-48954f4f8fe2",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJl/6UGuK7cscG6tiUtvK9jVhBZFmXLSSCJK3HMb8OAvF1XYsRIgbuYrsEVCo1NzlQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "899f8d86-c232-46d2-9863-facae19ed759",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            money = 0f
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843yy",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a83664d2-d5d1-4ba0-abb4-2687c0a2b7f8",
                            Email = "normal@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NORMAL@GMAIL.COM",
                            NormalizedUserName = "NORMAL",
                            PasswordHash = "AQAAAAIAAYagAAAAEFNQ0VS7UJlJJQxCqbgKUXzJLUoPkClXF6uo+ZjswbOf4LMWUZnlM8lspO0CiFAQXA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "083560a3-102b-446c-b2a2-5a827daefbd3",
                            TwoFactorEnabled = false,
                            UserName = "normal",
                            money = 0f
                        });
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.Daily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BalanceCardWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BuyPriceOfAll")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BuyPriceOfUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CodeNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("CuttingCostOfAll")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CuttingCostOfUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EmptyBoxesWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("EntitlementId")
                        .HasColumnType("int");

                    b.Property<int>("FarmerId")
                        .HasColumnType("int");

                    b.Property<string>("FarmerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("RepositoryMaterialId")
                        .HasColumnType("int");

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierOfFarmsEntitlementId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierOfFarmsId")
                        .HasColumnType("int");

                    b.Property<int>("TotalBoxes")
                        .HasColumnType("int");

                    b.Property<decimal>("WaxingCostOfAll")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("WaxingCostOfUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("WaxingFactoryEntitlementId")
                        .HasColumnType("int");

                    b.Property<int?>("WaxingFactory_As_dealerId")
                        .HasColumnType("int");

                    b.Property<decimal>("WeightAfterDiscount_2Percent")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EntitlementId");

                    b.HasIndex("FarmerId");

                    b.HasIndex("RepositoryMaterialId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("SupplierOfFarmsEntitlementId");

                    b.HasIndex("SupplierOfFarmsId");

                    b.HasIndex("WaxingFactoryEntitlementId");

                    b.HasIndex("WaxingFactory_As_dealerId");

                    b.ToTable("Dailies", (string)null);
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.DailyChekEmployees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AddJobHCount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AdditionalWorkingHourWage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("GirlsCount")
                        .HasColumnType("int");

                    b.Property<int>("MenCount")
                        .HasColumnType("int");

                    b.Property<decimal>("NormHWageG")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NormHWageM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NormJobHCount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<decimal>("PaidWage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ResultWage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Reward")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalWage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("DailyChekEmployees", (string)null);
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.Employees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AdditionalWorkingHourWage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("NormHWageG")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NormHWageM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<decimal>("Payments")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Remainder")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalRewards")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalWage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalWageAfterDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("workshopName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.ExternalEnvoices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<string>("BuyerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CodeNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<int>("RepositoryMaterialId")
                        .HasColumnType("int");

                    b.Property<decimal>("SalesPriceOfAll")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SalesPriceOfUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalBoxes")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("RepositoryMaterialId");

                    b.ToTable("ExternalEnvoices", (string)null);
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.FinancialEntitlement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Remainder")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("SupplierOfFarmId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPayments")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.HasIndex("SupplierOfFarmId");

                    b.ToTable("FinancialEntitlement", (string)null);
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.FinancialPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AmountPayment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("EntitlementId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EntitlementId");

                    b.ToTable("FinancialPayment", (string)null);
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.Fuel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntitlementId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal>("PriceOfOne")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.Property<string>("SourceName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("EntitlementId");

                    b.HasIndex("SourceId");

                    b.ToTable("Fuel", (string)null);
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArabicName = "العربية",
                            Code = "ar",
                            EnglishName = "Arabic"
                        },
                        new
                        {
                            Id = 2,
                            ArabicName = "الانكليزية",
                            Code = "en",
                            EnglishName = "English"
                        });
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.OtherSales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<string>("BuyerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<int>("RepositoryMaterialId")
                        .HasColumnType("int");

                    b.Property<decimal>("SalesPriceOfAll")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("RepositoryMaterialId");

                    b.ToTable("OtherSales", (string)null);
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.Refrigerator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<string>("BuyerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CodeNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalBalanceCardWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalBoxes")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalEmptyBoxesWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalSalesPriceOfAll")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalWeightAfterDiscount_2Percent")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.ToTable("Refrigerator", (string)null);
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.RefrigeratorDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BalanceCardWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CountOfBoxes")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("EmptyBoxesWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RefrigeratorId")
                        .HasColumnType("int");

                    b.Property<int>("RepositoryMaterialId")
                        .HasColumnType("int");

                    b.Property<decimal>("SalesPriceOfAll")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SalesPriceOfUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("WeightAfterDiscount_2Percent")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("RefrigeratorId");

                    b.HasIndex("RepositoryMaterialId");

                    b.ToTable("RefrigeratorDetails", (string)null);
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.Repository", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount_In")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Amount_Out")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Amount_Remender")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RepositoryMaterialsId")
                        .HasColumnType("int");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("RepositoryMaterialsId");

                    b.ToTable("Repository", (string)null);
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.RepositoryMaterials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<decimal?>("DefaultPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DefaultSoldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("RepositoryMaterials", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "روسي كبير عبوة",
                            Sort = 2
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "روسي صغير عبوة",
                            Sort = 3
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "صناديق حقلية",
                            Sort = 1
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "عماني هرم صغير عبوة",
                            Sort = 4
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "عماني هرم كبير عبوة",
                            Sort = 5
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "نصف حقلي عبوة",
                            Sort = 6
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "ربع حقلي عبوة",
                            Sort = 7
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "ربع الربع عبوة",
                            Sort = 8
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "حقلي توضيب عبوة",
                            Sort = 9
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "كرتون توضيب عبوة",
                            Sort = 10
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 2,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "فلين عبوة",
                            Sort = 11
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 2,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "كيس عبوة",
                            Sort = 12
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 3,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "زوايا",
                            Sort = 13
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 3,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "تحزيم",
                            Sort = 14
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 3,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "حبسات",
                            Sort = 15
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 3,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "ورق مطبوع",
                            Sort = 16
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 3,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "كرتون مطبوع",
                            Sort = 17
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "أبو صرة متنوع",
                            Sort = 18
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "أبو صرة حمرا",
                            Sort = 19
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 1,
                            DefaultPrice = 200m,
                            DefaultSoldPrice = 250m,
                            Name = "أبو صرة بلدية",
                            Sort = 20
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "يافاوي",
                            Sort = 21
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "كرمنتينا فرنسية",
                            Sort = 22
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "كرمنتينا بلدي",
                            Sort = 23
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "كرمنتينا عسلية",
                            Sort = 24
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "كرمنتينا طرابلسية",
                            Sort = 25
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "فراشة",
                            Sort = 26
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "يوسف أفندي",
                            Sort = 27
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "وجن",
                            Sort = 28
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "أورتينيك",
                            Sort = 29
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "حامض أمريكي",
                            Sort = 30
                        },
                        new
                        {
                            Id = 31,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "حامض بلدي",
                            Sort = 31
                        },
                        new
                        {
                            Id = 32,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "حامض ماير",
                            Sort = 32
                        },
                        new
                        {
                            Id = 33,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "حامض حلو",
                            Sort = 33
                        },
                        new
                        {
                            Id = 34,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "حامض سانتاريزا",
                            Sort = 34
                        },
                        new
                        {
                            Id = 35,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "دموي نظامي",
                            Sort = 35
                        },
                        new
                        {
                            Id = 36,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "دموي كذاب",
                            Sort = 36
                        },
                        new
                        {
                            Id = 37,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "ختملي",
                            Sort = 37
                        },
                        new
                        {
                            Id = 38,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "كريفون أبيض",
                            Sort = 38
                        },
                        new
                        {
                            Id = 39,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "كريفون زهري",
                            Sort = 39
                        },
                        new
                        {
                            Id = 40,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "كريفون دموي",
                            Sort = 40
                        },
                        new
                        {
                            Id = 41,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "أبو ميلو",
                            Sort = 41
                        },
                        new
                        {
                            Id = 42,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "سوما",
                            Sort = 42
                        },
                        new
                        {
                            Id = 43,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "تفاح",
                            Sort = 43
                        },
                        new
                        {
                            Id = 44,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "رمان",
                            Sort = 44
                        },
                        new
                        {
                            Id = 45,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "بطاطا",
                            Sort = 45
                        },
                        new
                        {
                            Id = 46,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "موز",
                            Sort = 46
                        },
                        new
                        {
                            Id = 47,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "كرز",
                            Sort = 47
                        },
                        new
                        {
                            Id = 48,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "خوخ",
                            Sort = 48
                        },
                        new
                        {
                            Id = 49,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "مشمش",
                            Sort = 49
                        },
                        new
                        {
                            Id = 50,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "لنغا",
                            Sort = 50
                        },
                        new
                        {
                            Id = 51,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "مندلينا",
                            Sort = 51
                        },
                        new
                        {
                            Id = 52,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "بلانسيا",
                            Sort = 52
                        },
                        new
                        {
                            Id = 53,
                            CategoryId = 1,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "أفوكادو",
                            Sort = 53
                        },
                        new
                        {
                            Id = 54,
                            CategoryId = 4,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "طبلية خشب",
                            Sort = 54
                        },
                        new
                        {
                            Id = 55,
                            CategoryId = 4,
                            DefaultPrice = 0m,
                            DefaultSoldPrice = 0m,
                            Name = "طبلية حديد",
                            Sort = 55
                        });
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.Repository_InOut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BuyPriceOfAll")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BuyPriceOfUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Direction")
                        .HasColumnType("int");

                    b.Property<int>("EntitlementId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RepositoryMaterialId")
                        .HasColumnType("int");

                    b.Property<decimal>("SoldPriceOfAll")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SoldPriceOfUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("EntitlementId");

                    b.HasIndex("RepositoryMaterialId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Repository_InOut", (string)null);
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SupplierNameWithoutSpaces")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Supplier", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 55,
                            SupplierName = "الشماعة",
                            SupplierNameWithoutSpaces = "الشماعة"
                        });
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.SupplierOfFarms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameWithoutSpaces")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("SupplierOfFarms", (string)null);
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.TotalFunds", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CurrentFund")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("EarnedProfits")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Profits")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalIn")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalOut")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("TotalFunds", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CurrentFund = 0m,
                            EarnedProfits = 0m,
                            Profits = 0m,
                            TotalIn = 0m,
                            TotalOut = 0m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("YaznGhanem.Domain.Entities.CustomRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("YaznGhanem.Domain.Entities.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("YaznGhanem.Domain.Entities.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("YaznGhanem.Domain.Entities.CustomRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YaznGhanem.Domain.Entities.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("YaznGhanem.Domain.Entities.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.BoFOpDetails", b =>
                {
                    b.HasOne("YaznGhanem.Domain.Entities.BoFOperations", "BoFOperation")
                        .WithMany("BoFOpDetails")
                        .HasForeignKey("BoFOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoFOperation");
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.BoFOperations", b =>
                {
                    b.HasOne("YaznGhanem.Domain.Entities.BoFUser", "BoFUser")
                        .WithMany("BoFOperations")
                        .HasForeignKey("BoFUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BoFUser");
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.Cars", b =>
                {
                    b.HasOne("YaznGhanem.Domain.Entities.Supplier", "Driver")
                        .WithMany("Cars")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YaznGhanem.Domain.Entities.FinancialEntitlement", "FinancialEntitlement")
                        .WithMany("Cars")
                        .HasForeignKey("EntitlementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("FinancialEntitlement");
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.CoolingRooms", b =>
                {
                    b.HasOne("YaznGhanem.Domain.Entities.Buyers", "Client")
                        .WithMany("CoolingRooms")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YaznGhanem.Domain.Entities.RepositoryMaterials", "RepositoryMaterial")
                        .WithMany("CoolingRooms")
                        .HasForeignKey("RepositoryMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("RepositoryMaterial");
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.Daily", b =>
                {
                    b.HasOne("YaznGhanem.Domain.Entities.FinancialEntitlement", "FinancialEntitlement")
                        .WithMany("Dailies")
                        .HasForeignKey("EntitlementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YaznGhanem.Domain.Entities.Supplier", "Farmer")
                        .WithMany()
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YaznGhanem.Domain.Entities.RepositoryMaterials", "RepositoryMaterial")
                        .WithMany("Dailies")
                        .HasForeignKey("RepositoryMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YaznGhanem.Domain.Entities.Supplier", null)
                        .WithMany("Dailies")
                        .HasForeignKey("SupplierId");

                    b.HasOne("YaznGhanem.Domain.Entities.FinancialEntitlement", "SupplierOfFarmsFinancialEntitlement")
                        .WithMany("SupplierOfFarmsDailies")
                        .HasForeignKey("SupplierOfFarmsEntitlementId");

                    b.HasOne("YaznGhanem.Domain.Entities.SupplierOfFarms", "SupplierOfFarms")
                        .WithMany("Dailies")
                        .HasForeignKey("SupplierOfFarmsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YaznGhanem.Domain.Entities.FinancialEntitlement", "WaxingFactoryFinancialEntitlement")
                        .WithMany("WaxingFactoryDailies")
                        .HasForeignKey("WaxingFactoryEntitlementId");

                    b.HasOne("YaznGhanem.Domain.Entities.Supplier", "WaxingFactory_As_dealer")
                        .WithMany("DailiesForWaxingFactoryDealer")
                        .HasForeignKey("WaxingFactory_As_dealerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Farmer");

                    b.Navigation("FinancialEntitlement");

                    b.Navigation("RepositoryMaterial");

                    b.Navigation("SupplierOfFarms");

                    b.Navigation("SupplierOfFarmsFinancialEntitlement");

                    b.Navigation("WaxingFactoryFinancialEntitlement");

                    b.Navigation("WaxingFactory_As_dealer");
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.DailyChekEmployees", b =>
                {
                    b.HasOne("YaznGhanem.Domain.Entities.Employees", "Employee")
                        .WithMany("DailyChekEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.ExternalEnvoices", b =>
                {
                    b.HasOne("YaznGhanem.Domain.Entities.Buyers", "Buyer")
                        .WithMany("ExternalEnvoices")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YaznGhanem.Domain.Entities.RepositoryMaterials", "RepositoryMaterial")
                        .WithMany("ExternalEnvoices")
                        .HasForeignKey("RepositoryMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("RepositoryMaterial");
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.FinancialEntitlement", b =>
                {
                    b.HasOne("YaznGhanem.Domain.Entities.Supplier", "Supplier")
                        .WithMany("FinancialEntitlements")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("YaznGhanem.Domain.Entities.SupplierOfFarms", "SupplierOfFarms")
                        .WithMany("FinancialEntitlements")
                        .HasForeignKey("SupplierOfFarmId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Supplier");

                    b.Navigation("SupplierOfFarms");
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.FinancialPayment", b =>
                {
                    b.HasOne("YaznGhanem.Domain.Entities.FinancialEntitlement", "FinancialEntitlement")
                        .WithMany("Paymenties")
                        .HasForeignKey("EntitlementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FinancialEntitlement");
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.Fuel", b =>
                {
                    b.HasOne("YaznGhanem.Domain.Entities.FinancialEntitlement", "FinancialEntitlement")
                        .WithMany("Fuels")
                        .HasForeignKey("EntitlementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YaznGhanem.Domain.Entities.Supplier", "Source")
                        .WithMany("Fuels")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinancialEntitlement");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.OtherSales", b =>
                {
                    b.HasOne("YaznGhanem.Domain.Entities.Buyers", "Buyer")
                        .WithMany("OtherSales")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YaznGhanem.Domain.Entities.RepositoryMaterials", "RepositoryMaterial")
                        .WithMany("OtherSales")
                        .HasForeignKey("RepositoryMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("RepositoryMaterial");
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.Refrigerator", b =>
                {
                    b.HasOne("YaznGhanem.Domain.Entities.Buyers", "Buyer")
                        .WithMany("Refrigerators")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.RefrigeratorDetails", b =>
                {
                    b.HasOne("YaznGhanem.Domain.Entities.Refrigerator", "Refrigerator")
                        .WithMany("RefrigeratorDetails")
                        .HasForeignKey("RefrigeratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YaznGhanem.Domain.Entities.RepositoryMaterials", "RepositoryMaterial")
                        .WithMany("RefrigeratorDetails")
                        .HasForeignKey("RepositoryMaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Refrigerator");

                    b.Navigation("RepositoryMaterial");
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.Repository", b =>
                {
                    b.HasOne("YaznGhanem.Domain.Entities.Category", "Category")
                        .WithMany("Repositories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YaznGhanem.Domain.Entities.RepositoryMaterials", "RepositoryMaterials")
                        .WithMany("Repositories")
                        .HasForeignKey("RepositoryMaterialsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("RepositoryMaterials");
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.RepositoryMaterials", b =>
                {
                    b.HasOne("YaznGhanem.Domain.Entities.Category", "Category")
                        .WithMany("RepositoryMaterials")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.Repository_InOut", b =>
                {
                    b.HasOne("YaznGhanem.Domain.Entities.FinancialEntitlement", "FinancialEntitlement")
                        .WithMany("Repository_Ins")
                        .HasForeignKey("EntitlementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YaznGhanem.Domain.Entities.RepositoryMaterials", "RepositoryMaterial")
                        .WithMany("Repository_InOuts")
                        .HasForeignKey("RepositoryMaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YaznGhanem.Domain.Entities.Supplier", "Supplier")
                        .WithMany("Repository_InOuts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FinancialEntitlement");

                    b.Navigation("RepositoryMaterial");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.BoFOperations", b =>
                {
                    b.Navigation("BoFOpDetails");
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.BoFUser", b =>
                {
                    b.Navigation("BoFOperations");
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.Buyers", b =>
                {
                    b.Navigation("CoolingRooms");

                    b.Navigation("ExternalEnvoices");

                    b.Navigation("OtherSales");

                    b.Navigation("Refrigerators");
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.Category", b =>
                {
                    b.Navigation("Repositories");

                    b.Navigation("RepositoryMaterials");
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.Employees", b =>
                {
                    b.Navigation("DailyChekEmployees");
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.FinancialEntitlement", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("Dailies");

                    b.Navigation("Fuels");

                    b.Navigation("Paymenties");

                    b.Navigation("Repository_Ins");

                    b.Navigation("SupplierOfFarmsDailies");

                    b.Navigation("WaxingFactoryDailies");
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.Refrigerator", b =>
                {
                    b.Navigation("RefrigeratorDetails");
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.RepositoryMaterials", b =>
                {
                    b.Navigation("CoolingRooms");

                    b.Navigation("Dailies");

                    b.Navigation("ExternalEnvoices");

                    b.Navigation("OtherSales");

                    b.Navigation("RefrigeratorDetails");

                    b.Navigation("Repositories");

                    b.Navigation("Repository_InOuts");
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.Supplier", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("Dailies");

                    b.Navigation("DailiesForWaxingFactoryDealer");

                    b.Navigation("FinancialEntitlements");

                    b.Navigation("Fuels");

                    b.Navigation("Repository_InOuts");
                });

            modelBuilder.Entity("YaznGhanem.Domain.Entities.SupplierOfFarms", b =>
                {
                    b.Navigation("Dailies");

                    b.Navigation("FinancialEntitlements");
                });
#pragma warning restore 612, 618
        }
    }
}
